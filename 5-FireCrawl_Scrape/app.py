# app.py
"""
Interface Streamlit pour l'application de scraping immobilier
"""

import streamlit as st
from scraping import scrape_and_parse, get_ai_summary, save_to_airtable

# Interface utilisateur
st.set_page_config(page_title="Scraping Immobilier IA", layout="wide")
st.title("üè† Scraping Immobilier avec Analyse IA")
st.markdown("Ce projet extrait les annonces immobili√®res et les analyse via un agent IA.")

# Session state
if "records" not in st.session_state:
    st.session_state.records = []

if "summaries" not in st.session_state:
    st.session_state.summaries = {}

# URL cible
url = st.text_input("URL √† scraper :", value="https://www.century21.fr/annonces/achat-maison/v-bordeaux/")

# Scraper & analyser
if st.button("Lancer l'extraction et l'analyse"):
    with st.spinner("üîÑ R√©cup√©ration des donn√©es..."):
        try:
            st.session_state.records = scrape_and_parse(url)
            
            if st.session_state.records:
                st.success(f"‚úÖ {len(st.session_state.records)} annonces trouv√©es !")
            else:
                st.warning("‚ö†Ô∏è Aucune annonce trouv√©e. V√©rifiez les logs de debug ci-dessous.")
                st.info("üí° Conseils de d√©pannage:")
                st.markdown("""
                - L'URL est-elle accessible ?
                - Le site a-t-il chang√© de structure ?
                - Consultez les logs de debug dans la console/terminal
                """)
            
        except Exception as e:
            st.error(f"‚ùå Erreur : {e}")
            st.code(str(e), language="python")

# Affichage et IA
if st.session_state.records:
    for i, record in enumerate(st.session_state.records, 1):
        with st.expander(f"Annonce {i} - {record['ref']}"):
            st.write(f"**Prix :** {record['price']}")
            st.write(f"**Localisation :** {record['location']}")
            st.write(f"**Description :** {record['description']}")
            
            # R√©sum√© IA avec cache
            if record['ref'] not in st.session_state.summaries:
                with st.spinner("ü§ñ G√©n√©ration de l'analyse..."):
                    summary = get_ai_summary(record)
                    st.session_state.summaries[record['ref']] = summary
            
            st.markdown("### ü§ñ R√©sum√© IA")
            st.markdown(st.session_state.summaries[record['ref']])
            
            # Envoi √† Airtable
            if st.button(f"üìä Enregistrer annonce {i} dans Airtable", key=f"btn_{i}"):
                record_with_summary = {
                    **record,
                    "summary": st.session_state.summaries[record['ref']]
                }
                
                success, message = save_to_airtable(record_with_summary)
                
                if success:
                    st.success("‚úÖ Enregistr√© dans Airtable")
                else:
                    st.error("‚ùå √âchec Airtable")
                    st.code(message, language="json")